/*
在本题中，单链表可能有环，也可能无环。给定两个单链表的头节点headl和head2,这两个链表可能相交，也可能不相交。
请实现一个函数，如果两个链表相交，请返回相交的第一个节点；如果不相交，返回null即可。

要求：如果链表l的长度为N，链表2的长度为M，时间复杂度请达到O(N+M)，额外空间复杂度请达到0(1)。
*/

package main

func main() {
	// 判断A和B链表是否有环
	// 如果两个均无环，连接首尾正常判断
	// 如果一个有环，一个无环，不可能相交
	// 如果均有环：有可能三种情况 ： 相交点再环开始前 / 入口处 / 环内

	// 当均无环时，怎么求出相交点？分别遍历两个链表，记录链表长度len1，len2。
	// 用两个指针指向两个链表的头部，让长度较长的链表先走|len1-len2|步，然后两个指针共同走，当两个指针相等时，即为第一个相交链表。

	// 当有环是，怎么怎么相交
	// 对其中一个用快慢指针求相遇点，相遇点必在环上。然后检测另一个链表的环是否包含这个点

	// 当有环时，怎么求出相交点？
	// 如果相交点在，相交点再环开始前 / 入口处。用|len1-len2|的方法就可求出
	// 如果相交点再环内，对于每个环来说，第一个相交点就是分别的第一个入环节点
}
